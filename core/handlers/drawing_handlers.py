from datetime import datetime

from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hbold

from core.db.applications_crud import user_participates_in_drawing, create_application, get_status_counts, \
    get_application_by_user_and_drawing, get_participants_by_status
from core.db.drawings_crud import get_drawing_by_id, get_drawings_by_status, get_winners
from core.keyboards.admin_inline import create_check_buttons, generate_winners_summary_keyboard
from core.keyboards.drawing_inline import create_drawing_info_buttons, generate_end_drawings_keyboard, \
    generate_drawing_summary_keyboard
from core.utils.menu_utils import update_or_send_callback_message

from core.utils.stateform import ApplicationForm


async def view_drawing_info(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await state.update_data(previous_menu="draws_menu")

    drawing_id = int(callback_query.data.split("_")[-1])
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    drawing = get_drawing_by_id(drawing_id)

    if not drawing:
        await callback_query.message.edit_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    application = get_application_by_user_and_drawing(user_id, drawing_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    start_date = datetime.strptime(drawing['start_date'], "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y") if drawing['start_date'] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    end_date = datetime.strptime(drawing['end_date'], "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y") if drawing['end_date'] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
    info_message = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {drawing['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {drawing['description']}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}\n\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if application:
        status = application["status"]
        attempts = application.get("attempts", 0)

        if status == "pending":
            await callback_query.message.edit_text(
                "üîµ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.\n",
                reply_markup=create_drawing_info_buttons(drawing_id, None))
        elif status == "approved":
            await callback_query.message.edit_text(
                "‚úÖ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: \n–°–∫—Ä–∏–Ω—à–æ—Ç –æ–¥–æ–±—Ä–µ–Ω. –û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É.\n",
                reply_markup=create_drawing_info_buttons(drawing_id, None))
        elif status == "rejected":
            await callback_query.message.edit_text(
                "f‚ùå –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: \n–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {3 - attempts}.\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç.",
                reply_markup=create_drawing_info_buttons(drawing_id, "üÜï –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç"))
        elif status == "payment_pending":
            await callback_query.message.edit_text(
                "üí≥ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: \n–û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º\n–†–ï–ö–í–ò–ó–ò–¢–´:\n1234 5678 8901 2345",
                reply_markup=create_drawing_info_buttons(drawing_id, "üßæ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ"))
        elif status == 'payment_bill_loaded':
            await callback_query.message.edit_text(
                "üí≥ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: \n–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ\n",
                reply_markup=create_drawing_info_buttons(drawing_id, None))
        elif status == "payment_confirmed":
            await callback_query.message.edit_text(
                "‚úÖ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: \n–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.",
                reply_markup=create_drawing_info_buttons(drawing_id, None))
        elif status == "payment_reject":
            await callback_query.message.edit_text(
                "‚ùå –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: \n–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. \n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.",
                reply_markup=create_drawing_info_buttons(drawing_id, "üßæ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ"))
    else:
        await callback_query.message.edit_text(
            "üîò –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ.\n",
            reply_markup=create_drawing_info_buttons(drawing_id, "‚ùáÔ∏è –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ"))


async def continue_drawing(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ."""
    drawing_id = int(callback_query.data.split("_")[-1])
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    application = get_application_by_user_and_drawing(user_id, drawing_id)

    if application:
        status = application["status"]

        if status == "pending":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            await callback_query.message.edit_text(
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
            )
        elif status == "rejected":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            await callback_query.message.edit_text(
                "–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è."
            )
            await state.update_data(selected_drawing_id=drawing_id)
            await state.set_state(ApplicationForm.WAITING_FOR_SCREEN)
        elif status == "payment_pending":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã
            await callback_query.message.edit_text(
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ"
            )
            await state.update_data(selected_drawing_id=drawing_id)
            await state.set_state(ApplicationForm.WAITING_FOR_PAYMENT_SCREEN)
        elif status == "payment_bill_loaded":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã
            await callback_query.message.edit_text(
                "–í–∞—à —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
            )
            await state.update_data(selected_drawing_id=drawing_id)
            await state.clear()
        elif status == "payment_confirmed":
            # –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
            await callback_query.message.edit_text(
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –∏ –≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞."
            )
        elif status == "payment_reject":
            # –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
            await callback_query.message.edit_text(
                "–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã."
            )
        elif status == "completed":
            # –ó–∞—è–≤–∫–∞ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
            from core.db.drawings_crud import check_participant_limit
            can_join, current_count, max_count = check_participant_limit(drawing_id)
            
            if not can_join:
                drawing = get_drawing_by_id(drawing_id)
                drawing_title = drawing['title'] if drawing else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                await callback_query.message.edit_text(
                    f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ \"{drawing_title}\" —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n"
                    f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_count}/{max_count}\n"
                    f"üîí –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–º–µ–Ω—å—à–∏—Ç—Å—è."
                )
                return
            
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
            create_application(user_id, drawing_id)
            drawing = get_drawing_by_id(drawing_id)
            drawing_title = drawing['title'] if drawing else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

            await callback_query.message.edit_text(
                f"üîÑ –í–∞—à–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!\n\n"
                f"–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ \"{drawing_title}\" –ø—Ä–∏—à–ª–∏—Ç–µ –æ–¥–∏–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç."
            )
            await state.update_data(selected_drawing_id=drawing_id)
            await state.set_state(ApplicationForm.WAITING_FOR_SCREEN)
        else:
            # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å
            await callback_query.message.edit_text(
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞—è–≤–∫–∏
        from core.db.drawings_crud import check_participant_limit
        can_join, current_count, max_count = check_participant_limit(drawing_id)
        
        if not can_join:
            drawing = get_drawing_by_id(drawing_id)
            drawing_title = drawing['title'] if drawing else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            await callback_query.message.edit_text(
                f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ \"{drawing_title}\" —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n"
                f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_count}/{max_count}\n"
                f"üîí –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–º–µ–Ω—å—à–∏—Ç—Å—è. "
            )
            return
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ
        create_application(user_id, drawing_id)
        drawing = get_drawing_by_id(drawing_id)
        drawing_title = drawing['title'] if drawing else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

        await callback_query.message.edit_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ \"{drawing_title}\" –ø—Ä–∏—à–ª–∏—Ç–µ –æ–¥–∏–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç."
        )
        await state.update_data(selected_drawing_id=drawing_id)
        await state.set_state(ApplicationForm.WAITING_FOR_SCREEN)


async def show_drawing_info(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ –º–µ–Ω—é –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
    await state.update_data(previous_menu=f"active_draws")

    drawing_id = int(callback_query.data.split("_")[-1])
    drawing = get_drawing_by_id(drawing_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏–∑ –ë–î
    status_counts = get_status_counts(drawing_id)
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    participants_count = sum(status_counts.values())  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
    pending = status_counts.get('pending', 0)
    approved = status_counts.get('approved', 0)
    rejected = status_counts.get('rejected', 0)
    payment_pending = status_counts.get('payment_pending', 0)
    payment_bill_loaded = status_counts.get('payment_bill_loaded', 0)
    payment_confirmed = status_counts.get('payment_confirmed', 0)
    payment_reject = status_counts.get('payment_reject', 0)

    # –£—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –æ–ø–ª–∞—Ç—ã –∫–∞–∫ —á–∞—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
    total_approved = approved + payment_pending + payment_confirmed + payment_reject

    if not drawing:
        await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ datetime, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    start_date = datetime.strptime(drawing['start_date'], "%Y-%m-%d %H:%M:%S").strftime('%d.%m.%Y') if drawing['start_date'] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    end_date = datetime.strptime(drawing['end_date'], "%Y-%m-%d %H:%M:%S").strftime('%d.%m.%Y') if drawing['end_date'] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    max_participants = drawing.get('max_participants', 0)
    limit_info = f"  –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:----------- {max_participants}" if max_participants > 0 else "  –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:------------ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    info_message = (
        f"```\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {drawing['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {drawing['description']}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:                  {start_date}\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:               {end_date}\n\n"
        f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:\n"
        f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:------ {participants_count}\n"
        f"{limit_info}\n"
        f"  –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:----------- {pending}\n"
        f"  –û–¥–æ–±—Ä–µ–Ω–æ:------------------- {total_approved}\n"
        f"  –û—Ç–∫–ª–æ–Ω–µ–Ω–æ:------------------ {rejected}\n"
        f"  –û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É:------------- {payment_pending}\n"
        f"  –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã:---- {payment_bill_loaded}\n"
        f"  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –æ–ø–ª–∞—Ç–∞:-------- {payment_confirmed}\n"
        f"  –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:----------- {payment_reject}\n"
        f"```"
    )

    await update_or_send_callback_message(callback_query, info_message, reply_markup=create_check_buttons(drawing_id), parse_mode="Markdown")


async def handle_end_draw_callback(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞."""
    await state.update_data(previous_menu="admin_panel")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –≤ —Å—Ç–∞—Ç—É—Å–µ ready_to_draw
    drawings = get_drawings_by_status(['ready_to_draw'])

    if not drawings:
        await query.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏
    await update_or_send_callback_message(
        callback_query=query,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å:",
        reply_markup=generate_end_drawings_keyboard(drawings)
    )


async def show_drawing_summary(query: CallbackQuery, state: FSMContext, drawing_id: int = None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ drawing_id –Ω–∞–ø—Ä—è–º—É—é
    if drawing_id is None:
        drawing_id = int(query.data.split("_")[-1])

    print(f"DEBUG: Received drawing_id={drawing_id}")

    drawing = get_drawing_by_id(drawing_id)

    if not drawing:
        print(f"ERROR: drawing_id={drawing_id} not found in DB.")
        await query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "payment_confirmed"
    winners_count = drawing.get("winners_count", 0)
    participants_count = len(get_participants_by_status(drawing_id, status="payment_confirmed"))

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary_message = (
        f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {drawing['title']}\n"
        f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {drawing['end_date']}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n"
        f"üéñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winners_count}\n"
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if winners_count == 0:
        reply_markup = generate_drawing_summary_keyboard(drawing_id, winners_count)  # –í—ã–±–æ—Ä —á–∏—Å–ª–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    else:
        reply_markup = generate_winners_summary_keyboard(drawing_id)  # –í—ã–±–æ—Ä —Å–∞–º–∏—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_or_send_callback_message(query, summary_message, reply_markup)


async def show_drawing_winners(query: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞."""
    drawing_id = int(query.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
    result = get_drawing_by_id(drawing_id)
    print(f"DEBUG: get_drawing_by_id({drawing_id}) returned: {result}")  # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ

    # –ï—Å–ª–∏ `result` ‚Äî —Å–ø–∏—Å–æ–∫, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    if isinstance(result, list) and result:
        result = result[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
    if not isinstance(result, dict):
        await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    drawing_title = result.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à")  # ‚úÖ –¢–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ —Å–ª–æ–≤–∞—Ä—å

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    winners = get_winners(drawing_id)

    if not winners:
        await query.answer("–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: –µ—Å–ª–∏ –µ—Å—Ç—å alias ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º @alias, –∏–Ω–∞—á–µ —Å—Å—ã–ª–∫–∞ –ø–æ ID
    winners_lines = []
    for i, w in enumerate(winners):
        alias = w.get('telegram_alias')
        if alias:
            winners_lines.append(f"{i + 1}. [@{alias}](tg://user?id={w['telegram_id']})")
        else:
            winners_lines.append(f"{i + 1}. [{w['telegram_id']}](tg://user?id={w['telegram_id']})")
    winners_list = "\n".join(winners_lines)

    message_text = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ **{drawing_title}**:\n\n{winners_list}"

    await update_or_send_callback_message(query, message_text, parse_mode="Markdown")
